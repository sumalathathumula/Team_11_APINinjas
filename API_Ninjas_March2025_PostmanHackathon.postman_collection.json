{
	"info": {
		"_postman_id": "ed5ede25-8181-4f12-be9a-d03d65fbf8c0",
		"name": "API_Ninjas_March2025_PostmanHackathon",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42910472"
	},
	"item": [
		{
			"name": "UserLoginController",
			"item": [
				{
					"name": "UserLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Extract expected values from variables\r",
									"const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"const expectedStatusLine = pm.variables.get(\"expectedStatusLine\");\r",
									"\r",
									"// Extract actual response values\r",
									"const actualStatusCode = pm.response.code;\r",
									"const actualStatusLine = pm.response.status;\r",
									"    \r",
									"\r",
									"// Compare values and handle tokens\r",
									"if (actualStatusCode === 200) {\r",
									"    pm.test(\"Valid Scenario\", function () {\r",
									"        pm.expect(actualStatusCode).to.eql(expectedStatusCode);\r",
									"        pm.expect(actualStatusLine).to.eql(expectedStatusLine);\r",
									"      \r",
									"    });\r",
									"\r",
									"    const responseBody = pm.response.json();\r",
									"    if (responseBody.token) {\r",
									"        pm.collectionVariables.set(\"authToken\", responseBody.token);\r",
									"        console.log(\"Token successfully set in collection level:\", responseBody.token);\r",
									"    } else {\r",
									"        console.warn(\"Token not found in response for valid scenario.\");\r",
									"    }\r",
									"\r",
									"} else if (actualStatusCode === 400) {\r",
									"    pm.test(\"Invalid Scenario\", function () {\r",
									"        pm.expect(actualStatusCode).to.eql(expectedStatusCode);\r",
									"        pm.expect(actualStatusLine).to.eql(expectedStatusLine);\r",
									"    });\r",
									"   } else if (actualStatusCode === 401) {\r",
									"    pm.test(\"Unauthorized Scenario\", function () {\r",
									"        pm.expect(actualStatusCode).to.eql(expectedStatusCode);\r",
									"        pm.expect(actualStatusLine).to.eql(expectedStatusLine);\r",
									"    });\r",
									"    \r",
									"\r",
									"}else {\r",
									"    pm.test(\"Unexpected Status Code\", function () {\r",
									"        pm.fail(`Unexpected status code: ${actualStatusCode}`);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Validate response schema\", function () {\r",
									"    const responseSchema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"email\": {\r",
									"                \"type\": \"string\",\r",
									"                \"pattern\": \"^[a-zA-Z0-9][a-zA-Z0-9.]+@gmail\\\\.com$\"\r",
									"            },\r",
									"            \"roles\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"status\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"token\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"userId\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \r",
									"       \r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(responseSchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userLoginEmailId\":\"{{EmailId}}\",\r\n \"password\": \"{{password}}\"\r\n \r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ProgramController",
			"item": [
				{
					"name": "CreateNewProgram-201",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"//validate headers\r",
									"pm.test('content-type header is present',()=>{\r",
									"pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"pm.test('content-types header is application/json',()=> {\r",
									"pm.expect(pm.response.headers.\r",
									"    get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});\r",
									"\r",
									"//validate data type\r",
									"const response = pm.response.json();\r",
									"pm.test('test data-types of the response',()=> {\r",
									"pm.expect(response).to.be.an('object');\r",
									"pm.expect(response.programName).to.be.a('string');\r",
									"pm.expect(response.programStatus).to.be.a('string');\r",
									"pm.expect(response.programDescription).to.be.a('string');\r",
									"pm.expect(response.programId).to.be.a('number');\r",
									"});\r",
									"\r",
									"//validate schema\r",
									"var schema={\r",
									"'$schema': 'http://json-schema.org/draft-07/schema#',\r",
									"'title': 'Generated schema for Root',\r",
									"'type': 'object',\r",
									"'properties': {\r",
									"'programId': {\r",
									"'type': 'number'\r",
									"},\r",
									"'programName': {\r",
									"'type': 'string'\r",
									"},\r",
									"'programDescription': {\r",
									"'type': 'string'\r",
									"},\r",
									"'programStatus': {\r",
									"'type': 'string'\r",
									"},\r",
									"'creationTime': {\r",
									"'type': 'string'\r",
									"},\r",
									"'lastModTime': {\r",
									"'type': 'string'\r",
									"}\r",
									"},\r",
									"'required': [\r",
									"'programId',\r",
									"'programName',\r",
									"'programStatus',\r",
									"'creationTime',\r",
									"'lastModTime'\r",
									"]\r",
									"}\r",
									"pm.test('schema validations',()=>{\r",
									"pm.expect(tv4.validate(response,schema)).to.be.true;\r",
									"});\r",
									"\r",
									"console.log(response.programId);\r",
									"pm.collectionVariables.set(\"programId\",response.programId);\r",
									"console.log(response.programName);\r",
									"pm.collectionVariables.set(\"programName\", response.programName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// function Str_Random(length) {\r",
									"//     let result = '';\r",
									"//     const characters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    \r",
									"//     // Loop to generate characters for the specified length\r",
									"//     for (let i = 0; i < length; i++) {\r",
									"//         const randomInd = Math.floor(Math.random() * characters.length);\r",
									"//         result += characters.charAt(randomInd);\r",
									"//     }\r",
									"//     return result;\r",
									"// }\r",
									"// //pm.globals.set('programName',(Str_Random(10)));\r",
									"// pm.collectionVariables.set('programName',(Str_Random(10)));\r",
									"\r",
									"// if(pm.iterationData.get(\"name\")==\"CreateProgram\"){\r",
									"//     var x = pm.iterationData.get(\"data\");\r",
									"//     pm.collectionVariables.set(\"programDescription\",x.programDescription);\r",
									"//     pm.collectionVariables.set(\"programStatus\",x.programStatus);\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"programDescription\" : \"{{programDescription}}\",\r\n\r\n\"programName\" : \"{{programName}}\",\r\n\"programStatus\" : \"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateNewProgram-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"console.log(pm.response);\r",
									"\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"//validate headers\r",
									"pm.test('content-type header is present',()=>{\r",
									"pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"pm.test('content-types header is application/json',()=> {\r",
									"pm.expect(pm.response.headers.\r",
									"    get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// function Str_Random(length) {\r",
									"//     let result = '';\r",
									"//     const characters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"    \r",
									"//     // Loop to generate characters for the specified length\r",
									"//     for (let i = 0; i < length; i++) {\r",
									"//         const randomInd = Math.floor(Math.random() * characters.length);\r",
									"//         result += characters.charAt(randomInd);\r",
									"//     }\r",
									"//     return result;\r",
									"// }\r",
									"// //pm.globals.set('programName',(Str_Random(10)));\r",
									"// pm.collectionVariables.set('programName',(Str_Random(0)));\r",
									"\r",
									"// if(pm.iterationData.get(\"name\")==\"CreateProgram\"){\r",
									"//     var x = pm.iterationData.get(\"data\");\r",
									"//     pm.collectionVariables.set(\"programDescription\",x.programDescription);\r",
									"//     pm.collectionVariables.set(\"programStatus\",x.programStatus);\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"programDescription\" : \"{{programDescription}}\",\r\n\"programName\" : \"\",\r\n\"programStatus\" : \"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllPrograms-200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate headers\r",
									"pm.test('content-type header is present',()=>{\r",
									"pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"pm.test('content-types header is application/json',()=> {\r",
									"pm.expect(pm.response.headers.\r",
									"    get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});\r",
									"\r",
									"// //validate data type\r",
									"// const response = pm.response.json();\r",
									"// pm.test('test data-types of the response',()=> {\r",
									"// pm.expect(response).to.be.an('object');\r",
									"// pm.expect(response.programName).to.be.a('string');\r",
									"// pm.expect(response.programStatus).to.be.a('string');\r",
									"// pm.expect(response.programDescription).to.be.a('string');\r",
									"// pm.expect(response.programId).to.be.a('number');\r",
									"// });\r",
									"\r",
									"//validate schema\r",
									"var schema={\r",
									"'$schema': 'http://json-schema.org/draft-07/schema#',\r",
									"'title': 'Generated schema for Root',\r",
									"'type': 'object',\r",
									"'properties': {\r",
									"'programId': {\r",
									"'type': 'number'\r",
									"},\r",
									"'programName': {\r",
									"'type': 'string'\r",
									"},\r",
									"'programDescription': {\r",
									"'type': 'string'\r",
									"},\r",
									"'programStatus': {\r",
									"'type': 'string'\r",
									"},\r",
									"'creationTime': {\r",
									"'type': 'string'\r",
									"},\r",
									"'lastModTime': {\r",
									"'type': 'string'\r",
									"}\r",
									"},\r",
									"'required': [\r",
									"'programId',\r",
									"'programName',\r",
									"'programStatus',\r",
									"'creationTime',\r",
									"'lastModTime'\r",
									"]\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProgramsWithUsers-200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate headers\r",
									"pm.test('content-type header is present',()=>{\r",
									"pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"pm.test('content-types header is application/json',()=> {\r",
									"pm.expect(pm.response.headers.\r",
									"    get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});\r",
									"\r",
									"// //validate data type\r",
									"// const response = pm.response.json();\r",
									"// pm.test('test data-types of the response',()=> {\r",
									"// pm.expect(response).to.be.an(\"object\");\r",
									"// pm.expect(response.programName).to.be.a('string');\r",
									"// pm.expect(response.programStatus).to.be.a('string');\r",
									"// pm.expect(response.programDescription).to.be.a('string');\r",
									"// pm.expect(response.programId).to.be.a('number');\r",
									"// pm.expect(response.programUsers).to.be.an('array');\r",
									"// });\r",
									"\r",
									"// const jsonData = pm.response.json();\r",
									"// pm.test(\"Test data-types of the response\",()=>{\r",
									"//     pm.expect(jsonData).to.deep.equal(\"object\");\r",
									"//     pm.expect(jsonData.programId).to.deep.equal(Number);\r",
									"//     pm.expect(jsonData.programName).to.deep.equal(String);\r",
									"//     pm.expect(jsonData.programDescription).to.deep.equal(String);\r",
									"//     pm.expect(jsonData.programStatus).to.deep.equal(String);  \r",
									"// });\r",
									"\r",
									"//validate schema\r",
									"var schema={\r",
									"'$schema': 'http://json-schema.org/draft-07/schema#',\r",
									"'title': 'Generated schema for Root',\r",
									"'type': 'object',\r",
									"'properties': {\r",
									"'programId': {\r",
									"'type': 'number'\r",
									"},\r",
									"'programName': {\r",
									"'type': 'string'\r",
									"},\r",
									"'programDescription': {\r",
									"'type': 'string'\r",
									"},\r",
									"'programStatus': {\r",
									"'type': 'string'\r",
									"},\r",
									"'creationTime': {\r",
									"'type': 'string'\r",
									"},\r",
									"'lastModTime': {\r",
									"'type': 'string'\r",
									"}\r",
									"},\r",
									"'required': [\r",
									"'programId',\r",
									"'programName',\r",
									"'programStatus',\r",
									"'creationTime',\r",
									"'lastModTime'\r",
									"]\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProgramByProgramID-200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//validate headers\r",
									"pm.test('content-type header is present',()=>{\r",
									"pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"pm.test('content-types header is application/json',()=> {\r",
									"pm.expect(pm.response.headers.\r",
									"    get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});\r",
									"\r",
									"//validate data type\r",
									"const response = pm.response.json();\r",
									"pm.test('test data-types of the response',()=> {\r",
									"pm.expect(response).to.be.an('object');\r",
									"pm.expect(response.programName).to.be.a('string');\r",
									"pm.expect(response.programStatus).to.be.a('string');\r",
									"pm.expect(response.programDescription).to.be.a('string');\r",
									"pm.expect(response.programId).to.be.a('number');\r",
									"});\r",
									"\r",
									"//validate schema\r",
									"var schema={\r",
									"'$schema': 'http://json-schema.org/draft-07/schema#',\r",
									"'title': 'Generated schema for Root',\r",
									"'type': 'object',\r",
									"'properties': {\r",
									"'programId': {\r",
									"'type': 'number'\r",
									"},\r",
									"'programName': {\r",
									"'type': 'string'\r",
									"},\r",
									"'programDescription': {\r",
									"'type': 'string'\r",
									"},\r",
									"'programStatus': {\r",
									"'type': 'string'\r",
									"},\r",
									"'creationTime': {\r",
									"'type': 'string'\r",
									"},\r",
									"'lastModTime': {\r",
									"'type': 'string'\r",
									"}\r",
									"},\r",
									"'required': [\r",
									"'programId',\r",
									"'programName',\r",
									"'programStatus',\r",
									"'creationTime',\r",
									"'lastModTime'\r",
									"]\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProgramByProgramID-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"wrong program id : \" + pm.response.text);\r",
									"//validate status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//validate headers\r",
									"pm.test('content-type header is present',()=>{\r",
									"pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"pm.test('content-types header is application/json',()=> {\r",
									"pm.expect(pm.response.headers.\r",
									"    get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// if(pm.iterationData.get(\"name\")==\"programIdInvalid\"){\r",
									"//     var x = pm.iterationData.get(\"data\");\r",
									"//     pm.collectionVariables.set(\"programIdInvalid\",x.programId);\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProgramByProgramName-200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate headers\r",
									"pm.test('content-type header is present',()=>{\r",
									"pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"pm.test('content-types header is application/json',()=> {\r",
									"pm.expect(pm.response.headers.\r",
									"    get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});\r",
									"\r",
									"//validate data type\r",
									"const response = pm.response.json();\r",
									"pm.test('test data-types of the response',()=> {\r",
									"pm.expect(response).to.be.an('object');\r",
									"pm.expect(response.programName).to.be.a('string');\r",
									"pm.expect(response.programStatus).to.be.a('string');\r",
									"pm.expect(response.programDescription).to.be.a('string');\r",
									"pm.expect(response.programId).to.be.a('number');\r",
									"});\r",
									"\r",
									"//validate schema\r",
									"var schema={\r",
									"'$schema': 'http://json-schema.org/draft-07/schema#',\r",
									"'title': 'Generated schema for Root',\r",
									"'type': 'object',\r",
									"'properties': {\r",
									"'programId': {\r",
									"'type': 'number'\r",
									"},\r",
									"'programName': {\r",
									"'type': 'string'\r",
									"},\r",
									"'programDescription': {\r",
									"'type': 'string'\r",
									"},\r",
									"'programStatus': {\r",
									"'type': 'string'\r",
									"},\r",
									"'creationTime': {\r",
									"'type': 'string'\r",
									"},\r",
									"'lastModTime': {\r",
									"'type': 'string'\r",
									"}\r",
									"},\r",
									"'required': [\r",
									"'programId',\r",
									"'programName',\r",
									"'programStatus',\r",
									"'creationTime',\r",
									"'lastModTime'\r",
									"]\r",
									"}\r",
									"pm.test('schema validations',()=>{\r",
									"pm.expect(tv4.validate(response,schema)).to.be.true;\r",
									"});\r",
									"\r",
									"console.log(response.programId);\r",
									"pm.globals.set('programId', response.programId);\r",
									"console.log(response.programName);\r",
									"pm.globals.set('programName', response.programName);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// if(pm.iterationData.get(\"name\")==\"UpdateProgram\"){\r",
									"//     var x = pm.iterationData.get(\"data\");\r",
									"//     pm.collectionVariables.set(\"programDescription\",x.programDescription);\r",
									"//     pm.collectionVariables.set(\"programStatus\",x.programStatus);\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n\"programDescription\" : \"{{programUpdatedDescription}}\",\r\n\"programName\" : \"{{programName}}\",\r\n\"programStatus\" : \"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProgramByProgramName-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"// //validate headers\r",
									"// pm.test('content-type header is present',()=>{\r",
									"// pm.response.to.have.header('Content-Type');\r",
									"// });\r",
									"// pm.test('content-types header is application/json',()=> {\r",
									"// pm.expect(pm.response.headers.\r",
									"//     get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"// });\r",
									"\r",
									"// //validate data type\r",
									"// const response = pm.response.json();\r",
									"// pm.test('test data-types of the response',()=> {\r",
									"// pm.expect(response).to.be.an('object');\r",
									"// pm.expect(response.programName).to.be.a('string');\r",
									"// pm.expect(response.programStatus).to.be.a('string');\r",
									"// pm.expect(response.programDescription).to.be.a('string');\r",
									"// pm.expect(response.programId).to.be.a('number');\r",
									"// });\r",
									"\r",
									"// //validate schema\r",
									"// var schema={\r",
									"// '$schema': 'http://json-schema.org/draft-07/schema#',\r",
									"// 'title': 'Generated schema for Root',\r",
									"// 'type': 'object',\r",
									"// 'properties': {\r",
									"// 'programId': {\r",
									"// 'type': 'number'\r",
									"// },\r",
									"// 'programName': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'programDescription': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'programStatus': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'creationTime': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'lastModTime': {\r",
									"// 'type': 'string'\r",
									"// }\r",
									"// },\r",
									"// 'required': [\r",
									"// 'programId',\r",
									"// 'programName',\r",
									"// 'programStatus',\r",
									"// 'creationTime',\r",
									"// 'lastModTime'\r",
									"// ]\r",
									"// }\r",
									"// pm.test('schema validations',()=>{\r",
									"// pm.expect(tv4.validate(response,schema)).to.be.true;\r",
									"// });\r",
									"\r",
									"// console.log(response.programId);\r",
									"// pm.globals.set('PROGRAMID', response.programId);\r",
									"// console.log(response.programName);\r",
									"// pm.globals.set('PROGRAMNAME', response.programName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// if(pm.iterationData.get(\"name\")==\"programNameInvalid\"){\r",
									"//     var x = pm.iterationData.get(\"data\");\r",
									"//     pm.collectionVariables.set(\"programNameInvalid\",x.programName);\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n//\"programName\" : \"{{programName}}\",\r\n\"programStatus\" : \"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProgramByProgramName-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"\r",
									"// //validate headers\r",
									"// pm.test('content-type header is present',()=>{\r",
									"// pm.response.to.have.header('Content-Type');\r",
									"// });\r",
									"// pm.test('content-types header is application/json',()=> {\r",
									"// pm.expect(pm.response.headers.\r",
									"//     get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"// });\r",
									"\r",
									"// //validate data type\r",
									"// const response = pm.response.json();\r",
									"// pm.test('test data-types of the response',()=> {\r",
									"// pm.expect(response).to.be.an('object');\r",
									"// pm.expect(response.programName).to.be.a('string');\r",
									"// pm.expect(response.programStatus).to.be.a('string');\r",
									"// pm.expect(response.programDescription).to.be.a('string');\r",
									"// pm.expect(response.programId).to.be.a('number');\r",
									"// });\r",
									"\r",
									"// //validate schema\r",
									"// var schema={\r",
									"// '$schema': 'http://json-schema.org/draft-07/schema#',\r",
									"// 'title': 'Generated schema for Root',\r",
									"// 'type': 'object',\r",
									"// 'properties': {\r",
									"// 'programId': {\r",
									"// 'type': 'number'\r",
									"// },\r",
									"// 'programName': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'programDescription': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'programStatus': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'creationTime': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'lastModTime': {\r",
									"// 'type': 'string'\r",
									"// }\r",
									"// },\r",
									"// 'required': [\r",
									"// 'programId',\r",
									"// 'programName',\r",
									"// 'programStatus',\r",
									"// 'creationTime',\r",
									"// 'lastModTime'\r",
									"// ]\r",
									"// }\r",
									"// pm.test('schema validations',()=>{\r",
									"// pm.expect(tv4.validate(response,schema)).to.be.true;\r",
									"// });\r",
									"\r",
									"// console.log(response.programId);\r",
									"// pm.globals.set('PROGRAMID', response.programId);\r",
									"// console.log(response.programName);\r",
									"// pm.globals.set('PROGRAMNAME', response.programName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// if(pm.iterationData.get(\"name\")==\"UpdateProgram\"){\r",
									"//     var x = pm.iterationData.get(\"data\");\r",
									"//     pm.collectionVariables.set(\"programDescription\",x.programDescription);\r",
									"//     pm.collectionVariables.set(\"programStatus\",x.programStatus);\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n//\"programDescription\" : \"{{programUpdatedDescription}}\",\r\n\"programName\" : \"{{programName}}\"\r\n//\"programStatus\" : \"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProgramByProgramID-200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate headers\r",
									"pm.test('content-type header is present',()=>{\r",
									"pm.response.to.have.header('Content-Type');\r",
									"});\r",
									"pm.test('content-types header is application/json',()=> {\r",
									"pm.expect(pm.response.headers.\r",
									"    get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"});\r",
									"\r",
									"//validate data type\r",
									"const response = pm.response.json();\r",
									"pm.test('test data-types of the response',()=> {\r",
									"pm.expect(response).to.be.an('object');\r",
									"pm.expect(response.programName).to.be.a('string');\r",
									"pm.expect(response.programStatus).to.be.a('string');\r",
									"pm.expect(response.programDescription).to.be.a('string');\r",
									"pm.expect(response.programId).to.be.a('number');\r",
									"});\r",
									"\r",
									"//validate schema\r",
									"var schema={\r",
									"'$schema': 'http://json-schema.org/draft-07/schema#',\r",
									"'title': 'Generated schema for Root',\r",
									"'type': 'object',\r",
									"'properties': {\r",
									"'programId': {\r",
									"'type': 'number'\r",
									"},\r",
									"'programName': {\r",
									"'type': 'string'\r",
									"},\r",
									"'programDescription': {\r",
									"'type': 'string'\r",
									"},\r",
									"'programStatus': {\r",
									"'type': 'string'\r",
									"},\r",
									"'creationTime': {\r",
									"'type': 'string'\r",
									"},\r",
									"'lastModTime': {\r",
									"'type': 'string'\r",
									"}\r",
									"},\r",
									"'required': [\r",
									"'programId',\r",
									"'programName',\r",
									"'programStatus',\r",
									"'creationTime',\r",
									"'lastModTime'\r",
									"]\r",
									"}\r",
									"pm.test('schema validations',()=>{\r",
									"pm.expect(tv4.validate(response,schema)).to.be.true;\r",
									"});\r",
									"\r",
									"console.log(response.programId);\r",
									"pm.globals.set('programId', response.programId);\r",
									"console.log(response.programName);\r",
									"pm.globals.set('programName', response.programName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// if(pm.iterationData.get(\"name\")==\"UpdateProgram\"){\r",
									"//     var x = pm.iterationData.get(\"data\");\r",
									"//     pm.collectionVariables.set(\"programDescription\",x.programDescription);\r",
									"//     pm.collectionVariables.set(\"programStatus\",x.programStatus);\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\" : \"{{programUpdatedDescription}}\",\r\n\"programName\" : \"{{programName}}\",\r\n\"programStatus\" : \"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProgramByProgramID-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"// //validate headers\r",
									"// pm.test('content-type header is present',()=>{\r",
									"// pm.response.to.have.header('Content-Type');\r",
									"// });\r",
									"// pm.test('content-types header is application/json',()=> {\r",
									"// pm.expect(pm.response.headers.\r",
									"//     get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"// });\r",
									"\r",
									"// //validate data type\r",
									"// const response = pm.response.json();\r",
									"// pm.test('test data-types of the response',()=> {\r",
									"// pm.expect(response).to.be.an('object');\r",
									"// pm.expect(response.programName).to.be.a('string');\r",
									"// pm.expect(response.programStatus).to.be.a('string');\r",
									"// pm.expect(response.programDescription).to.be.a('string');\r",
									"// pm.expect(response.programId).to.be.a('number');\r",
									"// });\r",
									"\r",
									"// //validate schema\r",
									"// var schema={\r",
									"// '$schema': 'http://json-schema.org/draft-07/schema#',\r",
									"// 'title': 'Generated schema for Root',\r",
									"// 'type': 'object',\r",
									"// 'properties': {\r",
									"// 'programId': {\r",
									"// 'type': 'number'\r",
									"// },\r",
									"// 'programName': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'programDescription': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'programStatus': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'creationTime': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'lastModTime': {\r",
									"// 'type': 'string'\r",
									"// }\r",
									"// },\r",
									"// 'required': [\r",
									"// 'programId',\r",
									"// 'programName',\r",
									"// 'programStatus',\r",
									"// 'creationTime',\r",
									"// 'lastModTime'\r",
									"// ]\r",
									"// }\r",
									"// pm.test('schema validations',()=>{\r",
									"// pm.expect(tv4.validate(response,schema)).to.be.true;\r",
									"// });\r",
									"\r",
									"// console.log(response.programId);\r",
									"// pm.globals.set('PROGRAMID', response.programId);\r",
									"// console.log(response.programName);\r",
									"// pm.globals.set('PROGRAMNAME', response.programName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// if(pm.iterationData.get(\"name\")==\"ProgramIdInvalid\"){\r",
									"//     var x = pm.iterationData.get(\"data\");\r",
									"//     pm.collectionVariables.set(\"programIdInvalid\",x.programId);\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\" : \"{{programUpdatedDescription}}\",\r\n\"programName\" : \"{{programName}}\",\r\n\"programStatus\" : \"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProgramByProgramID-400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"// //validate headers\r",
									"// pm.test('content-type header is present',()=>{\r",
									"// pm.response.to.have.header('Content-Type');\r",
									"// });\r",
									"// pm.test('content-types header is application/json',()=> {\r",
									"// pm.expect(pm.response.headers.\r",
									"//     get(\"Content-Type\")).to.eql(\"application/json\");\r",
									"// });\r",
									"\r",
									"// //validate data type\r",
									"// const response = pm.response.json();\r",
									"// pm.test('test data-types of the response',()=> {\r",
									"// pm.expect(response).to.be.an('object');\r",
									"// pm.expect(response.programName).to.be.a('string');\r",
									"// pm.expect(response.programStatus).to.be.a('string');\r",
									"// pm.expect(response.programDescription).to.be.a('string');\r",
									"// pm.expect(response.programId).to.be.a('number');\r",
									"// });\r",
									"\r",
									"// //validate schema\r",
									"// var schema={\r",
									"// '$schema': 'http://json-schema.org/draft-07/schema#',\r",
									"// 'title': 'Generated schema for Root',\r",
									"// 'type': 'object',\r",
									"// 'properties': {\r",
									"// 'programId': {\r",
									"// 'type': 'number'\r",
									"// },\r",
									"// 'programName': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'programDescription': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'programStatus': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'creationTime': {\r",
									"// 'type': 'string'\r",
									"// },\r",
									"// 'lastModTime': {\r",
									"// 'type': 'string'\r",
									"// }\r",
									"// },\r",
									"// 'required': [\r",
									"// 'programId',\r",
									"// 'programName',\r",
									"// 'programStatus',\r",
									"// 'creationTime',\r",
									"// 'lastModTime'\r",
									"// ]\r",
									"// }\r",
									"// pm.test('schema validations',()=>{\r",
									"// pm.expect(tv4.validate(response,schema)).to.be.true;\r",
									"// });\r",
									"\r",
									"// console.log(response.programId);\r",
									"// pm.globals.set('PROGRAMID', response.programId);\r",
									"// console.log(response.programName);\r",
									"// pm.globals.set('PROGRAMNAME', response.programName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// if(pm.iterationData.get(\"name\")==\"UpdateProgram\"){\r",
									"//     var x = pm.iterationData.get(\"data\");\r",
									"//     pm.collectionVariables.set(\"programDescription\",x.programDescription);\r",
									"//     pm.collectionVariables.set(\"programStatus\",x.programStatus);\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"programDescription\" : \"{{programUpdatedDescription}}\",\r\n\"programName\" : \"{{programName}}\"\r\n//\"programStatus\" : \"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM5NDc2MywiZXhwIjoxNzQxNDIzNTYzfQ.-RsXwU28yY_O2mK-GZXDon17HD9Je__m3Qg1gqa-LxAUpsO6NHgT7x7OVKb28_qVvyQ5laG6RL3RNduEBEOU3Q",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "ProgramBatchController",
			"item": [
				{
					"name": "GetAllBatches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is correct\", function(){\r",
									"    const expmessage = pm.variables.get(\"message\");\r",
									"    pm.expect(pm.response.responsemessage).to.eql(expmessage);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  const expcotenttype = pm.variables.get (\"Content-Type\");\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql(expcotenttype);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//JSON Schema Validation\r",
									"var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"    \"type\" :\"object\",\r",
									"    \"properties\": {\r",
									"        \r",
									"        \"batchId\": {\"type\":\"string\"},\r",
									"        \"batchName\": {\"type\":\"string\"},\r",
									"         \"batchDescription\": {\"type\":\"string\"},\r",
									"          \"batchStatus\": {\"type\":\"string\"},\r",
									"          \"batchNoOfClasses\": {\"type\":\"string\"},\r",
									"          \"programId\": {\"type\":\"string\"},\r",
									"          \"programName\": {\"type\":\"string\"}\r",
									"        },\r",
									"        \"required\": [\"batchId\",\"batchName\",\"batchDescription\", \"batchStatus\",\"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"        }\r",
									"        pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateNewBatches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"let batchid = pm.collectionVariables.set(\"batchId\",jsonData.batchId);\r",
									" console.log(batchid);\r",
									"\r",
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is correct\", function(){\r",
									"    const expmessage = pm.variables.get(\"message\");\r",
									"    pm.expect(pm.response.responsemessage).to.eql(expmessage);\r",
									"});\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  const expcotenttype = pm.variables.get (\"Content-Type\");\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql(expcotenttype);\r",
									"});\r",
									"\r",
									"//data validation\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Value of Data Field\",()=>{\r",
									"   \r",
									"    pm.expect(jsonData.batchId).to.be.eql(pm.variables.get('batchId'));\r",
									"    pm.expect(jsonData.batchName).to.be.eql(pm.variables.get('batchName'));\r",
									"    pm.expect(jsonData.batchDescription).to.be.eql(pm.variables.get('batchDescription'));\r",
									"    pm.expect(jsonData.batchStatus).to.be.eql(pm.variables.get('batchStatus'));\r",
									"    pm.expect(jsonData.batchNoOfClasses).to.be.eql(pm.variables.get('batchNoOfClasses'));\r",
									"    pm.expect(jsonData.programId).to.be.eql(parseInt(pm.variables.get('programId')));\r",
									"    pm.expect(jsonData.programName).to.be.eql(pm.variables.get('programName'));\r",
									"    \r",
									"});\r",
									"\r",
									"//JSON Schema Validation\r",
									"var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"    \"type\" :\"object\",\r",
									"    \"properties\": {\r",
									"        \r",
									"        \"batchId\": {\"type\":\"string\"},\r",
									"        \"batchName\": {\"type\":\"string\"},\r",
									"         \"batchDescription\": {\"type\":\"string\"},\r",
									"          \"batchStatus\": {\"type\":\"string\"},\r",
									"          \"batchNoOfClasses\": {\"type\":\"string\"},\r",
									"          \"programId\": {\"type\":\"string\"},\r",
									"          \"programName\": {\"type\":\"string\"}\r",
									"        },\r",
									"        \"required\": [\"batchId\",\"batchName\",\"batchDescription\", \"batchStatus\",\"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"        }\r",
									"        pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"programId\":{{programId}},\r\n  \"programName\":\"{{programName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBatchdetailsbyProgramID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is correct\", function(){\r",
									"    const expmessage = pm.variables.get(\"message\");\r",
									"    pm.expect(pm.response.responsemessage).to.eql(expmessage);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  const expcotenttype = pm.variables.get (\"Content-Type\");\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql(expcotenttype);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//JSON Schema Validation\r",
									"var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"    \"type\" :\"object\",\r",
									"    \"properties\": {\r",
									"        \r",
									"        \"batchId\": {\"type\":\"string\"},\r",
									"        \"batchName\": {\"type\":\"string\"},\r",
									"         \"batchDescription\": {\"type\":\"string\"},\r",
									"          \"batchStatus\": {\"type\":\"string\"},\r",
									"          \"batchNoOfClasses\": {\"type\":\"string\"},\r",
									"          \"programId\": {\"type\":\"string\"},\r",
									"          \"programName\": {\"type\":\"string\"}\r",
									"        },\r",
									"        \"required\": [\"batchId\",\"batchName\",\"batchDescription\", \"batchStatus\",\"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"        }\r",
									"        pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}/{{programId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}",
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBatchdetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"let batchid1 = pm.collectionVariables.set(\"batchId\",jsonData.batchId);\r",
									" console.log(batchid1);\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"let batchname = pm.collectionVariables.set(\"batchName\", jsonData.batchName);\r",
									"console.log(batchname);\r",
									"\r",
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is correct\", function(){\r",
									"    const expmessage = pm.variables.get(\"message\");\r",
									"    pm.expect(pm.response.responsemessage).to.eql(expmessage);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  const expcotenttype = pm.variables.get (\"Content-Type\");\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql(expcotenttype);\r",
									"});\r",
									"\r",
									"//data validation\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Value of Data Field\",()=>{\r",
									"   \r",
									"    pm.expect(jsonData.batchId).to.be.eql(pm.variables.get('batchId'));\r",
									"    pm.expect(jsonData.batchName).to.be.eql(pm.variables.get('batchName'));\r",
									"    pm.expect(jsonData.batchDescription).to.be.eql(pm.variables.get('batchDescription'));\r",
									"    pm.expect(jsonData.batchStatus).to.be.eql(pm.variables.get('batchStatus'));\r",
									"    pm.expect(jsonData.batchNoOfClasses).to.be.eql(pm.variables.get('batchNoOfClasses'));\r",
									"    pm.expect(jsonData.programId).to.be.eql(parseInt(pm.variables.get('programId')));\r",
									"    pm.expect(jsonData.programName).to.be.eql(pm.variables.get('programName'));\r",
									"    \r",
									"});\r",
									"\r",
									"//JSON Schema Validation\r",
									"var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"    \"type\" :\"object\",\r",
									"    \"properties\": {\r",
									"        \r",
									"        \"batchId\": {\"type\":\"string\"},\r",
									"        \"batchName\": {\"type\":\"string\"},\r",
									"         \"batchDescription\": {\"type\":\"string\"},\r",
									"          \"batchStatus\": {\"type\":\"string\"},\r",
									"          \"batchNoOfClasses\": {\"type\":\"string\"},\r",
									"          \"programId\": {\"type\":\"string\"},\r",
									"          \"programName\": {\"type\":\"string\"}\r",
									"        },\r",
									"        \"required\": [\"batchId\",\"batchName\",\"batchDescription\", \"batchStatus\",\"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"        }\r",
									"        pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchDescription\":\"{{batchDescription}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"programId\":{{programId}},\r\n  \"programName\":\"{{programName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}/{{batchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetDetailsbyBatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is correct\", function(){\r",
									"    const expmessage = pm.variables.get(\"message\");\r",
									"    pm.expect(pm.response.responsemessage).to.eql(expmessage);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  const expcotenttype = pm.variables.get (\"Content-Type\");\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql(expcotenttype);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//JSON Schema Validation\r",
									"var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"    \"type\" :\"object\",\r",
									"    \"properties\": {\r",
									"        \r",
									"        \"batchId\": {\"type\":\"string\"},\r",
									"        \"batchName\": {\"type\":\"string\"},\r",
									"         \"batchDescription\": {\"type\":\"string\"},\r",
									"          \"batchStatus\": {\"type\":\"string\"},\r",
									"          \"batchNoOfClasses\": {\"type\":\"string\"},\r",
									"          \"programId\": {\"type\":\"string\"},\r",
									"          \"programName\": {\"type\":\"string\"}\r",
									"        },\r",
									"        \"required\": [\"batchId\",\"batchName\",\"batchDescription\", \"batchStatus\",\"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"        }\r",
									"        pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}/{{batchName}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}",
								"{{batchName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBatchdetailsByBatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is correct\", function(){\r",
									"    const expmessage = pm.variables.get(\"message\");\r",
									"    pm.expect(pm.response.responsemessage).to.eql(expmessage);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  const expcotenttype = pm.variables.get (\"Content-Type\");\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql(expcotenttype);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//JSON Schema Validation\r",
									"var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"    \"type\" :\"object\",\r",
									"    \"properties\": {\r",
									"        \r",
									"        \"batchId\": {\"type\":\"string\"},\r",
									"        \"batchName\": {\"type\":\"string\"},\r",
									"         \"batchDescription\": {\"type\":\"string\"},\r",
									"          \"batchStatus\": {\"type\":\"string\"},\r",
									"          \"batchNoOfClasses\": {\"type\":\"string\"},\r",
									"          \"programId\": {\"type\":\"string\"},\r",
									"          \"programName\": {\"type\":\"string\"}\r",
									"        },\r",
									"        \"required\": [\"batchId\",\"batchName\",\"batchDescription\", \"batchStatus\",\"batchNoOfClasses\",\"programId\",\"programName\"]\r",
									"        }\r",
									"        pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });\r",
									"\r",
									"\r",
									"if(pm.response.code===200){\r",
									"    const responseJson = pm.response.json();\r",
									"     if (responseJson && responseJson.batchId && responseJson.programId) {\r",
									"        pm.variables.set(\"batchId\", responseJson.batchId);\r",
									"        pm.variables.set(\"programId\",Number(responseJson.programId));\r",
									"        console.log(\"batchId stored:\",Number(responseJson.batchId ));\r",
									"        console.log(\"programId stored:\",Number(responseJson.programId ));\r",
									"    } else {\r",
									"        console.log(\"batchId not found in response.\");\r",
									"    }\r",
									"\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}/{{batchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateNewBatchesInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is correct\", function(){\r",
									"    const expmessage = pm.variables.get(\"message\");\r",
									"    pm.expect(pm.response.responsemessage).to.eql(expmessage);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBatchdetailsbyProgramIDInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is correct\", function(){\r",
									"    const expmessage = pm.variables.get(\"message\");\r",
									"    pm.expect(pm.response.responsemessage).to.eql(expmessage);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}/{{programIDInv}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}",
								"{{programIDInv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBatchdetailsInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is correct\", function(){\r",
									"    const expmessage = pm.variables.get(\"message\");\r",
									"    pm.expect(pm.response.responsemessage).to.eql(expmessage);\r",
									"});\r",
									"\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}/{{batchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetDetailsbyBatchNameInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is correct\", function(){\r",
									"    const expmessage = pm.variables.get(\"message\");\r",
									"    pm.expect(pm.response.responsemessage).to.eql(expmessage);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}/{{batchNameInv}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}",
								"{{batchNameInv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBatchdetailsByBatchIDInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status message is correct\", function(){\r",
									"    const expmessage = pm.variables.get(\"message\");\r",
									"    pm.expect(pm.response.responsemessage).to.eql(expmessage);\r",
									"});\r",
									"\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}/{{batchIdInv}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}",
								"{{batchIdInv}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{authToken}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "UserController",
			"item": [
				{
					"name": "CreateUserWithRole",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const scenario = pm.variables.get(\"scenario\");  // Get the scenario\r",
									"const expectedContentType = pm.variables.get(\"expContentType\");\r",
									"let expMessage = pm.variables.get(\"expMessage\");\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is correct\", function() {\r",
									"    pm.response.to.have.status(pm.variables.get(\"expStatuscode\"));\r",
									"\r",
									"    if (responseJson && responseJson.user && responseJson.user.userId) {\r",
									"        if(pm.variables.get(\"scenario\")===\"ValidDataWithR01ForCreateUser\"){\r",
									"            //Admin\r",
									"            pm.collectionVariables.set(\"userId\", responseJson.user.userId);\r",
									"            pm.variables.set(\"userNewLoginEmail\", responseJson.user.userLoginEmail);\r",
									"            console.log(\"User ID stored:\", responseJson.user.userId);\r",
									"        }\r",
									"        else if(pm.variables.get(\"scenario\")===\"ValidDataWithR02ForCreateUser\"){\r",
									"            //Staff\r",
									"            pm.collectionVariables.set(\"userId2\", responseJson.user.userId);\r",
									"            pm.variables.set(\"userNewLoginEmail2\", responseJson.user.userLoginEmail);\r",
									"            console.log(\"User ID2 stored:\", responseJson.user.userId);\r",
									"        }\r",
									"        else if(pm.variables.get(\"scenario\")===\"ValidDataWithR03ForCreateUser\"){\r",
									"            //Student\r",
									"            pm.collectionVariables.set(\"userId3\", responseJson.user.userId);\r",
									"            pm.variables.set(\"userNewLoginEmail3\", responseJson.user.userLoginEmail);\r",
									"            console.log(\"User ID3 stored:\", responseJson.user.userId);\r",
									"        }\r",
									"    } else {\r",
									"        console.log(\"User ID not found in response.\");\r",
									"    }\r",
									"});\r",
									" \r",
									"//  var jsonData = JSON.parse(responseBody);\r",
									"// let userid = pm.collectionVariables.set(\"userId\",jsonData.user.userId);\r",
									"//  console.log(userid);\r",
									"\r",
									"pm.test(\"Validate Content-Type\", function () {       \r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(expectedContentType);\r",
									"});\r",
									"\r",
									"\r",
									"if (scenario === \"invalid_firstname_empty\") {\r",
									"    pm.test(\"Response contains correct error message for empty first name\", function() {\r",
									"       console.log(\"Message :\", expMessage);\r",
									"       pm.expect(expMessage).to.be.an(\"array\");\r",
									"       pm.expect(responseJson.message).to.be.oneOf(expMessage);\r",
									"    });\r",
									"} else if (scenario === \"invalid_lastname_empty\") {\r",
									"    pm.test(\"Response contains correct error message for empty last name\", function() {\r",
									"        pm.expect(responseJson.message).to.eql(expMessage);\r",
									"    });\r",
									"} else if (scenario === \"invalid_email_format\") {\r",
									"    pm.test(\"Response contains correct error message for invalid email format\", function() {\r",
									"        pm.expect(responseJson.message).to.eql(expMessage);\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"if(pm.response.code === 201){\r",
									"    // Validate status code text\r",
									"    pm.test(\"Status code text is Created\", function () {\r",
									"        pm.response.to.have.status(\"Created\");\r",
									"    });\r",
									"\r",
									"    // Initialize Ajv (Postman has it built-in, no need to import)\r",
									"    const Ajv = require('ajv');  // Required in Postman\r",
									"    const ajv = new Ajv({ allErrors: true });\r",
									"\r",
									"    // Define JSON schema\r",
									"    const schema = { \r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"user\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"userId\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"userFirstName\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"userLastName\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"userMiddleName\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"userPhoneNumber\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"userLocation\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"userTimeZone\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"userLinkedinUrl\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"userEduUg\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"userEduPg\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"userComments\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"userVisaStatus\": {\r",
									"                \"type\": \"string\"\r",
									"                },\r",
									"                \"userLoginEmail\": {\r",
									"                \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"userId\",\r",
									"                \"userFirstName\",\r",
									"                \"userLastName\",        \r",
									"                \"userPhoneNumber\",        \r",
									"                \"userTimeZone\",\r",
									"                \"userLinkedinUrl\",        \r",
									"                \"userVisaStatus\",\r",
									"                \"userLoginEmail\"\r",
									"            ]\r",
									"            },\r",
									"            \"roles\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": [\r",
									"                {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                    \"roleId\": {\r",
									"                    \"type\": \"string\"\r",
									"                    },\r",
									"                    \"userRoleStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                    }\r",
									"                },\r",
									"                \"required\": [\r",
									"                    \"roleId\",\r",
									"                    \"userRoleStatus\"\r",
									"                ]\r",
									"                }\r",
									"            ]\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"user\",\r",
									"            \"roles\"\r",
									"        ]\r",
									"    }\r",
									"\r",
									"    // Validate response schema using Ajv\r",
									"    pm.test(\"Response schema should be valid\", function () {\r",
									"        const validate = ajv.compile(schema);\r",
									"        const valid = validate(responseJson);\r",
									"\r",
									"        if (!valid) {\r",
									"            console.log(\"Schema Validation Errors:\", validate.errors);\r",
									"        }\r",
									"\r",
									"        pm.expect(valid, \"Response does not match schema\").to.be.true;\r",
									"    });\r",
									"    \r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Function to generate a random 10-digit phone number\r",
									"function generateRandomPhoneNumber() {\r",
									"    let countryCode = \"+91 \"; // You can change this based on the region\r",
									"    let number = Math.floor(1000000000 + Math.random() * 9000000000); // Ensures a 10-digit number\r",
									"    return countryCode + number;\r",
									"}\r",
									"\r",
									"// Function to generate a unique email ID\r",
									"function generateUniqueEmail(baseEmail) {\r",
									"    let randomNum = Math.floor(1000 + Math.random() * 9000); // Generates a 4-digit random number\r",
									"    let emailParts = baseEmail.split(\"@\");\r",
									"    return `${emailParts[0]}${randomNum}@${emailParts[1]}`;\r",
									"}\r",
									"\r",
									"if(pm.variables.get(\"scenario\")===\"CreatingUserWithExistingPhoneNum\"){\r",
									"    pm.variables.set('userPhoneNumber',pm.variables.get('userPhoneNumber'));\r",
									"}\r",
									"else\r",
									"{\r",
									"    // Set a random phone number CreatingUserWithExistingPhoneNum\r",
									"    if (pm.variables.get('userPhoneNumber') !== \"\")\r",
									"        pm.variables.set('userPhoneNumber', generateRandomPhoneNumber());\r",
									"}\r",
									"\r",
									" // Generate a unique email ID based on the provided one\r",
									" const email = pm.variables.get('userLoginEmail');\r",
									" if(email != \"\")\r",
									"    pm.variables.set('userLoginEmail', generateUniqueEmail(email));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userComments\": \"{{userComments}}\",\r\n    \"userEduPg\": \"{{userEduPg}}\",\r\n    \"userEduUg\": \"{{userEduUg}}\",\r\n    \"userFirstName\": \"{{userFirstName}}\",\r\n    \"userLastName\": \"{{userLastName}}\",\r\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n    \"userLocation\": \"{{userLocation}}\",\r\n    \"userMiddleName\": \"{{userMiddleName}}\",\r\n    \"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n    \"userRoleMaps\": [\r\n        {\r\n            \"roleId\": \"{{roleId}}\",\r\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n        }\r\n    ],\r\n    \"userTimeZone\": \"{{userTimeZone}}\",\r\n    \"userVisaStatus\": \"{{userVisaStatus}}\",\r\n    \"userLogin\": {\r\n        \"loginStatus\": \"{{loginStatus}}\",\r\n        \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"expStatuscode\"));\r",
									"});\r",
									"\r",
									"if(pm.response.code===200){\r",
									"\r",
									"    let expectedContentType = pm.variables.get(\"expContentType\"); // Example: \"application/json\"\r",
									"    console.log(expectedContentType);\r",
									"     console.log(pm.response.headers.get(\"Content-Type\"));\r",
									"    pm.test(\"Validate Content-Type\", function () {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(expectedContentType);\r",
									"    });\r",
									"   \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllUsersWithRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"    pm.collectionVariables.set(\"RoleId\", jsonData[2].roleId);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"expStatuscode\"));\r",
									"});\r",
									"\r",
									"if(pm.response.code===200){\r",
									"\r",
									"    let expectedContentType = pm.variables.get(\"expContentType\"); // Example: \"application/json\"\r",
									"    console.log(expectedContentType);\r",
									"     console.log(pm.response.headers.get(\"Content-Type\"));\r",
									"    pm.test(\"Validate Content-Type\", function () {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(expectedContentType);\r",
									"    });\r",
									"   \r",
									"   const Ajv = require('ajv');\r",
									"    const ajv = new Ajv({ allErrors: true });\r",
									"\r",
									"    const schema = {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"roleId\": { \"type\": \"string\"},\r",
									"                \"roleName\": { \"type\": \"string\" },\r",
									"                \"userId\": { \"type\": \"string\" },\r",
									"                \"userFirstName\": { \"type\": \"string\" },\r",
									"                \"userLastName\": { \"type\": \"string\"},\r",
									"                \"userRoleStatus\": { \"type\": \"string\"},\r",
									"                \"userPhoneNumber\": { \"type\": \"string\"},\r",
									"                \"userLocation\": { \"type\": \"string\"},\r",
									"                \"userTimeZone\": { \"type\": \"string\"},\r",
									"                \"userLinkedinUrl\": { \"type\": [\"string\", \"null\"]},\r",
									"                \"userEduUg\": { \"type\": \"string\" },\r",
									"                \"userVisaStatus\": { \"type\": \"string\" },\r",
									"                \"userLoginEmail\": { \"type\": [\"string\", \"null\"]}\r",
									"            },\r",
									"            \"required\": [\"roleId\", \"roleName\", \"userId\", \"userFirstName\", \"userLastName\", \"userRoleStatus\", \"userPhoneNumber\", \"userLocation\", \"userTimeZone\", \"userEduUg\", \"userVisaStatus\"]\r",
									"        }\r",
									"    };\r",
									"\r",
									"    // Get the response JSON\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // Validate the response\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(responseData);\r",
									"\r",
									"    pm.test(\"Response schema is valid\", function () {\r",
									"        pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
									"    });\r",
									"\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserInformationByUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"expStatuscode\"));\r",
									"});\r",
									"\r",
									"if(pm.response.code===200){\r",
									"\r",
									"    let expectedContentType = pm.variables.get(\"expContentType\"); // Example: \"application/json\"\r",
									"    console.log(expectedContentType);\r",
									"     console.log(pm.response.headers.get(\"Content-Type\"));\r",
									"    pm.test(\"Validate Content-Type\", function () {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(expectedContentType);\r",
									"    });\r",
									"   \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserRoleProgramBatchstatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"expStatuscode\"));\r",
									"});\r",
									"\r",
									"// Parse response body\r",
									"let response = pm.response.json();\r",
									"\r",
									"if(pm.response.code===200){  \r",
									"\r",
									"    let expectedContentType = pm.variables.get(\"expContentType\"); // Example: \"application/json\"\r",
									"    pm.test(\"Validate Content-Type\", function () {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(expectedContentType);\r",
									"    });\r",
									"    \r",
									"    let expMessage = pm.variables.get(\"expMessage\"); // Expected message template\r",
									"    let userId = pm.variables.get(\"userId\"); // Stored User ID\r",
									"\r",
									"    // Replace {userId} placeholder in expMessage with actual userId\r",
									"    let expectedMessage = expMessage.replace(\"{userId}\", userId);\r",
									"\r",
									"   \r",
									"    let actualMessage = response.message; // Assuming the API response has a 'message' field\r",
									"\r",
									"    // Debug logs\r",
									"    console.log(\"Expected Message:\", expectedMessage);\r",
									"    console.log(\"Actual Message:\", actualMessage);\r",
									"\r",
									"    // Validate message\r",
									"    pm.test(\"Validate success message\", function () {\r",
									"        pm.expect(actualMessage).to.equal(expectedMessage);\r",
									"    });\r",
									" \r",
									"   \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"programId\": \"{{programId}}\",\r\n    \"roleId\": \"{{roleId}}\",\r\n    \"userId\": \"{{userId2}}\",\r\n    \"userRoleProgramBatches\": [\r\n        {\r\n            \"batchId\": \"{{batchId}}\",\r\n            \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUserBatchIdByUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"expStatuscode\"));\r",
									"});\r",
									"\r",
									"if(pm.response.code===200){\r",
									"\r",
									"    let expectedContentType = pm.variables.get(\"expContentType\"); // Example: \"application/json\"\r",
									"    console.log(expectedContentType);\r",
									"     console.log(pm.response.headers.get(\"Content-Type\"));\r",
									"    pm.test(\"Validate Content-Type\", function () {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(expectedContentType);\r",
									"    });\r",
									"   \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUsersByRoleIdV2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"expStatuscode\"));\r",
									"});\r",
									"\r",
									"if(pm.response.code===200){\r",
									"\r",
									"    let expectedContentType = pm.variables.get(\"expContentType\"); // Example: \"application/json\"\r",
									"    console.log(expectedContentType);\r",
									"     console.log(pm.response.headers.get(\"Content-Type\"));\r",
									"    pm.test(\"Validate Content-Type\", function () {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(expectedContentType);\r",
									"    });\r",
									"   \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"expStatuscode\"));\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"\r",
									"if(pm.response.code===200){\r",
									"\r",
									"    let expectedContentType = pm.variables.get(\"expContentType\"); // Example: \"application/json\"\r",
									"    console.log(expectedContentType);\r",
									"     console.log(pm.response.headers.get(\"Content-Type\"));\r",
									"    pm.test(\"Validate Content-Type\", function () {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(expectedContentType);\r",
									"    });\r",
									"\r",
									"    // Initialize Ajv (Postman has it built-in, no need to import)\r",
									"    const Ajv = require('ajv');  // Required in Postman\r",
									"    const ajv = new Ajv({ allErrors: true });\r",
									"\r",
									"    // Define JSON schema\r",
									"    const schema = { \r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"userId\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"userFirstName\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"userLastName\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"userMiddleName\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"userPhoneNumber\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"userLocation\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"userTimeZone\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"userLinkedinUrl\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduUg\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"userEduPg\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"userComments\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"userVisaStatus\": {\r",
									"            \"type\": \"string\"\r",
									"            },\r",
									"            \"userLoginEmail\": {\r",
									"            \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"userId\",\r",
									"            \"userFirstName\",\r",
									"            \"userLastName\",          \r",
									"            \"userPhoneNumber\",            \r",
									"            \"userTimeZone\",\r",
									"            \"userLinkedinUrl\",           \r",
									"            \"userVisaStatus\",\r",
									"            \"userLoginEmail\"\r",
									"        ]\r",
									"        }\r",
									"         // Validate response schema using Ajv\r",
									"    pm.test(\"Response schema should be valid\", function () {\r",
									"        const validate = ajv.compile(schema);\r",
									"        const valid = validate(responseJson);\r",
									"\r",
									"        if (!valid) {\r",
									"            console.log(\"Schema Validation Errors:\", validate.errors);\r",
									"        }\r",
									"\r",
									"        pm.expect(valid, \"Response does not match schema\").to.be.true;\r",
									"    });\r",
									"\r",
									"    }\r",
									"\r",
									"   \r",
									"    \r",
									"   \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.variables.get(\"userId\")) {\r",
									"    console.log(\"User ID is missing. Ensure the Create User request was executed successfully.\");\r",
									"    pm.execution.setNextRequest(null); // Stops execution if userId is missing\r",
									"} else {    \r",
									"    console.log(\"Using stored User ID:\", pm.variables.get(\"userId\"));\r",
									"}\r",
									"\r",
									"// Function to generate a random 10-digit phone number\r",
									"function generateRandomPhoneNumber() {\r",
									"    let countryCode = \"+91 \"; // You can change this based on the region\r",
									"    let number = Math.floor(1000000000 + Math.random() * 9000000000); // Ensures a 10-digit number\r",
									"    return countryCode + number;\r",
									"}\r",
									"\r",
									"// Function to generate a unique email ID\r",
									"function generateUniqueEmail(baseEmail) {\r",
									"    let randomNum = Math.floor(1000 + Math.random() * 9000); // Generates a 4-digit random number\r",
									"    let emailParts = baseEmail.split(\"@\");\r",
									"    return `${emailParts[0]}${randomNum}@${emailParts[1]}`;\r",
									"}\r",
									"\r",
									"if(pm.variables.get(\"scenario\")===\"UpdateUserWithExisting_PhoneNum\"){\r",
									"    pm.variables.set('userPhoneNumber',pm.variables.get('userPhoneNumber'));\r",
									"}\r",
									"else\r",
									"{\r",
									"    // Set a random phone number CreatingUserWithExistingPhoneNum\r",
									"    if (pm.variables.get('userPhoneNumber') !== \"\")\r",
									"        pm.variables.set('userPhoneNumber', generateRandomPhoneNumber());\r",
									"}\r",
									"\r",
									" // Generate a unique email ID based on the provided one\r",
									" let email = pm.variables.get('userLoginEmail');\r",
									"pm.variables.set('userLoginEmail', generateUniqueEmail(email));\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"userComments\": \"{{userComments}}\",\r\n\"userEduPg\": \"{{userEduPg}}\",\r\n\"userEduUg\": \"{{userEduUg}}\",\r\n\"userFirstName\": \"{{userFirstName}}\",\r\n\"userId\": \"{{userId2}}\",\r\n\"userLastName\": \"{{userLastName}}\",\r\n\"userMiddleName\": \"{{userMiddleName}}\",\r\n\"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n\"userLocation\": \"{{userLocation}}\",\r\n\"userLoginEmail\":\"{{userLoginEmail}}\" ,\r\n\"userPhoneNumber\": \"{{userPhoneNumber}}\",\r\n\"userTimeZone\": \"CST\",\r\n\"userVisaStatus\": \"NA\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserRoleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"expStatuscode\"));\r",
									"});\r",
									"\r",
									"\r",
									"if(pm.response.code===200){\r",
									"\r",
									"    let expectedContentType = pm.variables.get(\"expContentType\"); // Example: \"application/json\"\r",
									"    pm.test(\"Validate Content-Type\", function () {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(expectedContentType);\r",
									"    });\r",
									"\r",
									"\r",
									"    /* validating response message */\r",
									"    let expMessage = pm.variables.get(\"expMessage\"); // Expected message template\r",
									"    let userId = pm.variables.get(\"userId\"); // Stored User ID\r",
									"\r",
									"    // Replace {userId} placeholder in expMessage with actual userId\r",
									"    let expectedMessage = expMessage.replace(\"{userId}\", userId);\r",
									"   \r",
									"    let actualMessage = pm.response.text(); // Assuming the API response has a 'message' field\r",
									"\r",
									"    // Debug logs\r",
									"    console.log(\"Expected Message:\", expectedMessage);\r",
									"    console.log(\"Actual Message:\", actualMessage);\r",
									"\r",
									"    // Validate message\r",
									"    pm.test(\"Validate success message\", function () {\r",
									"        pm.expect(actualMessage).to.equal(expectedMessage);\r",
									"    });\r",
									" \r",
									"   \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userRoleList\": [\r\n        {\r\n            \"roleId\": \"{{roleId}}\",\r\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserLoginStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"expStatuscode\"));\r",
									"});\r",
									"\r",
									"\r",
									"if(pm.response.code===200){\r",
									"\r",
									"    let expectedContentType = pm.variables.get(\"expContentType\"); // Example: \"application/json\"\r",
									"    pm.test(\"Validate Content-Type\", function () {\r",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(expectedContentType);\r",
									"    });\r",
									"\r",
									"\r",
									"    /* validating response message */\r",
									"    let expMessage = pm.variables.get(\"expMessage\"); // Expected message template\r",
									"    let userId = pm.variables.get(\"userId\"); // Stored User ID\r",
									"\r",
									"    // Replace {userId} placeholder in expMessage with actual userId\r",
									"    let expectedMessage = expMessage.replace(\"{userId}\", userId);\r",
									"   \r",
									"    let actualMessage = pm.response.text(); // Assuming the API response has a 'message' field\r",
									"\r",
									"    // Debug logs\r",
									"    console.log(\"Expected Message:\", expectedMessage);\r",
									"    console.log(\"Actual Message:\", actualMessage);\r",
									"\r",
									"    // Validate message\r",
									"    pm.test(\"Validate success message\", function () {\r",
									"        pm.expect(actualMessage).to.equal(expectedMessage);\r",
									"    });\r",
									" \r",
									"   \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"loginStatus\": \"{{loginStatus}}\",   \r\n    \"status\": \"{{status}}\",\r\n    \"userLoginEmail\": \"{{userNewLoginEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ByRoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});\r",
									"// pm.test(\"Response schema is valid\", function () {\r",
									"//     const schema = {\r",
									"//         \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"//         \"type\": \"array\",\r",
									"//         \"items\": {\r",
									"//             \"type\": \"object\",\r",
									"//             \"properties\": {\r",
									"//                 \"userComments\": { \"type\": \"string\" },\r",
									"//                 \"userEduPg\": { \"type\": \"string\" },\r",
									"//                 \"userEduUg\": { \"type\": \"string\" },\r",
									"//                 \"userFirstName\": { \"type\": \"string\" },\r",
									"//                 \"userId\": { \"type\": \"string\" },\r",
									"//                 \"userLastName\": { \"type\": \"string\" },\r",
									"//                 \"userLinkedinUrl\": { \"type\": \"string\" },\r",
									"//                 \"userLocation\": { \"type\": \"string\" },\r",
									"//                 \"userLoginEmail\": { \"type\": \"string\", \"format\": \"email\" },\r",
									"//                 \"userMiddleName\": { \"type\": \"string\" },\r",
									"//                 \"userPhoneNumber\": { \"type\": \"integer\" },\r",
									"//                 \"userTimeZone\": { \"type\": \"string\" },\r",
									"//                 \"userVisaStatus\": { \"type\": \"string\" }\r",
									"//             },\r",
									"//             \"required\": [\r",
									"//                 \"userId\",\r",
									"//                 \"userFirstName\",\r",
									"//                 \"userLastName\",\r",
									"//                 \"userLoginEmail\",\r",
									"//                 \"userPhoneNumber\"\r",
									"//             ]\r",
									"//         }\r",
									"//     };\r",
									"\r",
									"//     pm.response.to.have.jsonSchema(schema);\r",
									"// });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{RoleId}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{RoleId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ByRoleIdinv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{RoleIdinv}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{RoleIdinv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ByprogramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});\r",
									"\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"userComments\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userEduPg\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userEduUg\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userFirstName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLastName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLinkedinUrl\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"uri\"\r",
									"                },\r",
									"                \"userLocation\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLoginEmail\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"email\"\r",
									"                },\r",
									"                \"userMiddleName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userPhoneNumber\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"userTimeZone\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userVisaStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"userComments\",\r",
									"                \"userEduPg\",\r",
									"                \"userEduUg\",\r",
									"                \"userFirstName\",\r",
									"                \"userId\",\r",
									"                \"userLastName\",\r",
									"                \"userLinkedinUrl\",\r",
									"                \"userLocation\",\r",
									"                \"userLoginEmail\",\r",
									"                \"userPhoneNumber\",\r",
									"                \"userTimeZone\",\r",
									"                \"userVisaStatus\"\r",
									"            ]\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{programId}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ByProgramIdInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{programIdinv}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{programIdinv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ByprogramIdPut",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{programId}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{programId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ByBatchId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});\r",
									"\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"userComments\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userEduPg\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userEduUg\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userFirstName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLastName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLinkedinUrl\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"uri\"\r",
									"                },\r",
									"                \"userLocation\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLoginEmail\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"email\"\r",
									"                },\r",
									"                \"userMiddleName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userPhoneNumber\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"userTimeZone\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userVisaStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"userComments\",\r",
									"                \"userEduPg\",\r",
									"                \"userEduUg\",\r",
									"                \"userFirstName\",\r",
									"                \"userId\",\r",
									"                \"userLastName\",\r",
									"                \"userLinkedinUrl\",\r",
									"                \"userLocation\",\r",
									"                \"userLoginEmail\",\r",
									"                \"userPhoneNumber\",\r",
									"                \"userTimeZone\",\r",
									"                \"userVisaStatus\"\r",
									"            ]\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{batchId}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ByBatchIdInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{batchIdinv}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{batchIdinv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ByBatchIdPost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{batchId}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserDetailsById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{UserId}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{UserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserDetailsByIdInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{id}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserDetailsByIdPut",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{UserId}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{UserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CountByStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "StatusByRoleIdAll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});\r",
									"var responsedata = pm.response.json();\r",
									"var schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"status\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"count\": {\r",
									"        \"type\": \"integer\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\"status\", \"count\"]  \r",
									"  }\r",
									"};\r",
									"\r",
									"\r",
									"pm.test(\"Response matches the schema\", function () {\r",
									"  pm.expect(tv4.validate(responsedata, schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}?id={{id}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UserDetailsByIdInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}?id={{Idinv}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{Idinv}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ByStatusRoleIdPost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}?id={{id}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ActiveUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response schema is valid\", function () {\r",
									"    const schema = {\r",
									"        \"type\": \"array\",\r",
									"        \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"userComments\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userEduPg\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userEduUg\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userFirstName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLastName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLinkedinUrl\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"uri\"\r",
									"                },\r",
									"                \"userLocation\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userMiddleName\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userPhoneNumber\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"userTimeZone\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userVisaStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"userLoginEmail\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"email\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"userComments\",\r",
									"                \"userEduPg\",\r",
									"                \"userEduUg\",\r",
									"                \"userFirstName\",\r",
									"                \"userId\",\r",
									"                \"userLastName\",\r",
									"                \"userLinkedinUrl\",\r",
									"                \"userLocation\",\r",
									"                \"userMiddleName\",\r",
									"                \"userPhoneNumber\",\r",
									"                \"userTimeZone\",\r",
									"                \"userVisaStatus\",\r",
									"                \"userLoginEmail\"\r",
									"            ]\r",
									"        }\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ActiveUsersPost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FetchEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PostFetchEmail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RoleIdPost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									"pm.test(\"Headers is present\", function () {\r",
									"    const expectedcontenttype = pm.variables.get(\"Content-Type\"); \r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(expectedcontenttype);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{RoleId}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{RoleId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ClassModule",
			"item": [
				{
					"name": "CreateClassSchedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"csId\",jsonData.csId);\r",
									"console.log(jsonData.csId);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \r\n  \"batchId\":{{batchId}},\r\n  \"classNo\": \"{{classNo}}\",\r\n  \"classDate\": \"{{classDate}}\",\r\n  \"classTopic\": \"{{classTopic}}\",\r\n  \"classStatus\": \"{{classStatus}}\",\r\n  \"classStaffId\": \"{{userId2}}\",\r\n  \"classDescription\":\"{{classDescription}}\",\r\n  \"classComments\": \"{{classComments}}\",\r\n  \"classNotes\": \"{{classNotes}}\",\r\n  \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"classScheduledDates\": [\r\n    \"{{classScheduledDates}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUpcomingClassesForStudent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{userId2}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{userId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllClassRecordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetClassesByBatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{batchId}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetClassesByStaffID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{userId2}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{userId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetClassesByTopic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{topic}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{topic}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetClassDetailsByID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}{{csId}}",
							"host": [
								"{{baseURL}}{{endpoint}}{{csId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetClassRecordingsByBatchID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{batchId}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DownloadClassRecordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{csId}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{csId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetClassRecordingsByClassID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}/{{csId}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							],
							"path": [
								"{{csId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateClassSchedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchId\": {{batchId}},\r\n    \"classNo\": {{classNo}},\r\n    \"classDate\": \"{{classDate}}\",\r\n    \"classTopic\": \"{{classTopic}}\",\r\n    \"classStaffId\": \"{{userId2}}\",\r\n    \"classScheduledDatses\":[\"{{classScheduledDates}}\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}{{csId}}",
							"host": [
								"{{baseURL}}{{endpoint}}{{csId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateClassRecordings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});\r",
									"\r",
									"{\r",
									"  var responsedata = pm.response.json();\r",
									"console.log(responsedata);\r",
									"var schema ={\r",
									"  \"properties\": {\r",
									"    \"csId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classNo\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"classDate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classTopic\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classStaffId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classComments\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classNotes\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classRecordingPath\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"classScheduledDates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"csId\",\r",
									"    \"batchId\",\r",
									"    \"classNo\",\r",
									"    \"classDate\",\r",
									"    \"classTopic\",\r",
									"    \"classStatus\",\r",
									"    \"classStaffId\",\r",
									"    \"classDescription\",\r",
									"    \"classComments\",\r",
									"    \"classNotes\",\r",
									"    \"classRecordingPath\",\r",
									"    \"batchName\",\r",
									"    \"classScheduledDates\"\r",
									"  ]\r",
									"}\r",
									"}\r",
									"\r",
									"pm.test(\"Response contains valide JSON Data\",()=>{\r",
									"            pm.expect(tv4.validate(schema,responsedata)).to.be.true;\r",
									"        });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"csId\":{{csId}},\r\n    \"classRecordingPath\":\"{{classRecordingPath}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}{{csId}}",
							"host": [
								"{{baseURL}}{{endpoint}}{{csId}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTMxOTM2OCwiZXhwIjoxNzQxMzQ4MTY4fQ.eniH7TLIdUKKAr1QzTTjGujtw_HfDSCdqVgvtj33s4GGEA5Om7Ah9DBIjPzDr9ax_hIPiYYBmRLXPfa4sAihKw",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "DeleteModule",
			"item": [
				{
					"name": "DeleteClassByClassId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"statuscode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}{{csId}}",
							"host": [
								"{{baseURL}}{{endpoint}}{{csId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUserByUserId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(pm.variables.get(\"expStatuscode\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteExistingBatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  const expcotenttype = pm.variables.get (\"Content-Type\");\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql(expcotenttype);\r",
									"});\r",
									"\r",
									"//pm.collectionVariables.unset(\"batchId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}/{{batchId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}",
								"{{batchId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteExistingBatchInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//StatusCode Validation\r",
									"pm.test(\"Status code is correct\", function () {\r",
									"const expectedStatusCode = pm.variables.get(\"statuscode\");\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"//Headers Validation\r",
									"pm.test(\"Headers is present\", function () {\r",
									"  const expconnection = pm.variables.get(\"Connection\");\r",
									"   pm.expect(pm.response.headers.get('Connection')).to.eql(expconnection);\r",
									"  const expcotenttype = pm.variables.get (\"Content-Type\");\r",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.eql(expcotenttype);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}/{{batchIdInv}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}",
								"{{batchIdInv}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteProgramByProgramID-200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteProgramByProgramIName-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// if(pm.iterationData.get(\"name\")==\"ProgramNameInvalid\"){\r",
									"//     var x = pm.iterationData.get(\"data\");\r",
									"//     pm.collectionVariables.set(\"programNameInvalid\",x.programName);\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteProgramByProgramIName-200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteProgramByProgramID-404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//validate status code text\r",
									"pm.test(\"Status code text is Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// if(pm.iterationData.get(\"name\")==\"ProgramIdInvalid\"){\r",
									"//     var x = pm.iterationData.get(\"data\");\r",
									"//     pm.collectionVariables.set(\"programIdInvalid\",x.programId);\r",
									"// }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/{{endpoint}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"{{endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserLogOut",
			"item": [
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is correct\", function () {\r",
									"    const expectedStatusCode = parseInt(pm.variables.get(\"expectedStatusCode\"));\r",
									"    pm.expect(pm.response.code).to.eql(expectedStatusCode);\r",
									"});\r",
									"\r",
									"pm.test(\"Status line is correct\", function(){\r",
									"    const expstatusline = pm.variables.get(\"expectedStatusLine\"); \r",
									"    pm.expect(pm.response.status).to.eql(expstatusline);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"protocolVersion": "http1",
						"strictSSL": false,
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}{{endpoint}}",
							"host": [
								"{{baseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzZGV0b3JnYW5pemVyQGdtYWlsLmNvbSIsImlhdCI6MTc0MTM2NTg0MywiZXhwIjoxNzQxMzk0NjQzfQ.d-s5oNfUGCa8TGmdpZXxi4U6lyZv10xGPvpbffH3HEn0HNzjKVUb-lzU0a-EkZYUrlWdAYduuLtCz1LwXYtq1w",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Load data from file,\r",
					"if (typeof pm.variables.get('requestsData') !== 'object') {\r",
					"    pm.variables.set('requestsData', pm.iterationData.toObject());\r",
					"}\r",
					"const requestsData = pm.variables.get('requestsData');\r",
					"if (typeof requestsData !== 'object' || Object.keys(requestsData).length === 0) {\r",
					"    console.log('No external data provided or object is empty.');\r",
					"    return;\r",
					"}\r",
					"// Find the current request,\r",
					"const currentRequest = requestsData.requests.filter(({name}) => name === pm.info.requestName)[0];\r",
					"// Skip the rest since we have no data,\r",
					"if (!currentRequest) {\r",
					"    console.log(`Request ${pm.info.requestName} has no data defined.`);\r",
					"    return;\r",
					"}\r",
					"// Expose variables,\r",
					"const variables = currentRequest.data.shift();\r",
					"if (variables)\r",
					"{\r",
					"    for (const [key,value] of Object.entries(variables)) {\r",
					"        // If the key is 'userRoleMaps', extract the first roleId and userRoleStatus\r",
					"        if(key === 'userRoleMaps' && Array.isArray(value) && value.length > 0)\r",
					"        {\r",
					"            pm.variables.set('roleId', value[0].roleId);\r",
					"            pm.variables.set('userRoleStatus', value[0].userRoleStatus);\r",
					"        }\r",
					"        else if(key === 'userRoleList' && Array.isArray(value) && value.length > 0)\r",
					"        {\r",
					"            pm.variables.set('roleId', value[0].roleId);\r",
					"            pm.variables.set('userRoleStatus', value[0].userRoleStatus);\r",
					"        }\r",
					"        else if(key === 'userRoleProgramBatches' && Array.isArray(value) && value.length > 0)\r",
					"        {\r",
					"            pm.variables.set('batchId', value[0].batchId);\r",
					"            pm.variables.set('userRoleProgramBatchStatus', value[0].userRoleProgramBatchStatus);\r",
					"        }\r",
					"        else if (key === \"roleIds\" && Array.isArray(value) && value.length > 0) {\r",
					"            pm.variables.set(\"roleId\", value[0]); // Since \"roleIds\" is an array of strings\r",
					"        }\r",
					"        // If the key is 'userLogin', extract loginStatus and userLoginEmail\r",
					"        else if(key === 'userLogin' && typeof value === 'object')\r",
					"        {\r",
					"            pm.variables.set('loginStatus', value.loginStatus);\r",
					"            pm.variables.set('userLoginEmail', value.userLoginEmail);\r",
					"        }\r",
					"        else {\r",
					"            pm.variables.set(key, value);\r",
					"        }\r",
					"    }\r",
					"}\r",
					"pm.variables.set('requestsData', requestsData);\r",
					"// Decide where to go next,\r",
					"if (currentRequest.data.length > 0) {\r",
					"    pm.execution.setNextRequest(pm.info.requestName);\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://lms-hackthon-feb25-803334c87fbe.herokuapp.com/lms",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": ""
		},
		{
			"key": "programId",
			"value": ""
		},
		{
			"key": "programName",
			"value": ""
		},
		{
			"key": "batchId",
			"value": ""
		},
		{
			"key": "batchName",
			"value": ""
		},
		{
			"key": "userId2",
			"value": ""
		},
		{
			"key": "RoleId",
			"value": ""
		},
		{
			"key": "bid",
			"value": ""
		},
		{
			"key": "programIdInvalid",
			"value": ""
		},
		{
			"key": "programNameInvalid",
			"value": ""
		},
		{
			"key": "programDescription",
			"value": ""
		},
		{
			"key": "programStatus",
			"value": ""
		},
		{
			"key": "programUpdatedDescription",
			"value": ""
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "teamName",
			"value": ""
		},
		{
			"key": "userId3",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "csId",
			"value": ""
		}
	]
}